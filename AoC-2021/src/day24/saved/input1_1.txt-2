inp w
# d[0]
add y w
add y 7
add z y
# x = 0, z = y = d[0] + 7, w = d[0]
inp w
# d[1]
add x z
add x 13
mod x 26
# x = (d[0] + 20) % 26
eql x w
# x = ((d[0] + 20) % 26 == d[1]) ? 1 : 0
eql x 0
# x = ((d[0] + 20) % 26 == d[1]) ? 0 : 1
mul y 0
# y = 0
add y 25
# y = 25
mul y x
# y = ((d[0] + 20) % 26 == d[1]) ? 0 : 25
add y 1
# y = ((d[0] + 20) % 26 == d[1]) ? 1 : 26
mul z y
# z = (d[0] + 7) * (((d[0] + 20) % 26 == d[1]) ? 1 : 26)
mul y 0
add y w
add y 8
# y = d[1] + 8
mul y x
# x = ((d[0] + 20) % 26 == d[1]) ? 0 : 1
# y = (d[1] + 8) * (((d[0] + 20) % 26 == d[1]) ? 0 : 1)
# z = (d[0] + 7) * (((d[0] + 20) % 26 == d[1]) ? 1 : 26)
# (d[0] + 20) % 26
# 0 + 20 = 20 (mod 26) -> (((d[0] + 20) % 26 == d[1]) ? 1 : 26) => 26
# ...
# 5 + 20 = 25 (mod 26) -> (((d[0] + 20) % 26 == d[1]) ? 1 : 26) => 26
# 6 + 20 = 26 (mod 26) -> (((d[0] + 20) % 26 == d[1]) ? 1 : 26) => "60" - 1
# 7 + 20 = 27 (mod 26) -> (((d[0] + 20) % 26 == d[1]) ? 1 : 26) => "71" - 1
# 8 + 20 = 28 (mod 26) -> (((d[0] + 20) % 26 == d[1]) ? 1 : 26) => "82" - 1
# 9 + 20 = 29 (mod 26) -> (((d[0] + 20) % 26 == d[1]) ? 1 : 26) => "93" - 1
# вход "60...", "71...", "82..." "93..."
# y = 0, z = (d[0] + 7)
# иначе
# y = (d[1] + 8), z = (d[0] + 7) * 26
#
add z y
# вход "60...", "71...", "82..." "93..."
# y = 0, z = (d[0] + 7)
# иначе
# y = (d[1] + 8), z = (d[0] + 7) * 26 + (d[1] + 8)
inp w
# d[2]
mul x 0
add x 1
# x = 1
mul z 26
# вход "60...", "71...", "82..." "93..."
# z = (d[0] + 7) * 26
# иначе
# z = ((d[0] + 7) * 26 + (d[1] + 8)) * 26
mul y 0
add y w
# y = d[2]
add y 10
# y = d[2] + 10
add z y
# вход "60...", "71...", "82..." "93..."
# z = ((d[0] + 7) * 26) + d[2] + 10
# иначе
# z = ((d[0] + 7) * 26 + (d[1] + 8)) * 26 + d[2] + 10
inp w
# d[3]
mul x 0
# x = 0
add x z
# x = ((d[0] + 7) * 26 + (d[1] + 8)) * 26 + d[2] * 10
mod x 26
# x = (d[2] * 10 % 26)

div z 26
add x -2
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 4
mul y x
add z y
inp w
# d[4]
mul x 0
add x z
mod x 26
div z 26
add x -10
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 4
mul y x
add z y
inp w
# d[5]
mul x 0
add x z
mod x 26
add x 13
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 6
mul y x
add z y
inp w
# d[6]
mul x 0
add x z
mod x 26
div z 26
add x -14
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 11
mul y x
add z y
inp w
# d[7]
mul x 0
add x z
mod x 26
div z 26
add x -5
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 13
mul y x
add z y
inp w
# d[8]
mul x 0
add x z
mod x 26
add x 15
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 1
mul y x
add z y
inp w
# d[9]
mul x 0
add x z
mod x 26
add x 15
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 8
mul y x
add z y
inp w
# d[10]
mul x 0
add x z
mod x 26
div z 26
add x -14
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 4
mul y x
add z y
inp w
# d[11]
mul x 0
add x z
mod x 26
add x 10
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 13
mul y x
add z y
inp w
# d[12]
mul x 0
add x z
mod x 26
div z 26
add x -14
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 4
mul y x
add z y
inp w
# d[13]
mul x 0
add x z
mod x 26
div z 26
add x -5
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 14
mul y x
add z y

